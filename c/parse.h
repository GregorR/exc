#ifndef EXC_parse
#define EXC_parse 1
/*
 * Written in 2013 by Gregor Richards
 *
 * To the extent possible under law, the author(s) have dedicated all copyright
 * and related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty. 
 *
 * You should have received a copy of the CC0 Public Domain Dedication along
 * with this software. If not, see
 * <http://creativecommons.org/publicdomain/zero/1.0/>. 
 */ 
#include "node.h"

#include "scan.h"

#include "stdio.h"

#include "stdlib.h"

#include "sys/types.h"

#include "buffer.h"

BUFFER(Tokenp, Token *);
 enum Nodes {
    NODE_FIRST = 0,
/* Constants/literals */
NODE_NIL,
NODE_TOK,
NODE_ID,
NODE_DECORATION_NAME,
NODE_INT_LITERAL,
NODE_FLOAT_LITERAL,
NODE_CHAR_LITERAL,
NODE_STR_LITERAL,
/* Expressions */
NODE_PAREN,
NODE_GENERIC_SELECTION,
NODE_GENERIC_ASSOC_LIST,
NODE_GENERIC_ASSOCIATION,
NODE_GENERIC_ASSOCIATION_DEFAULT,
NODE_INDEX,
NODE_CALL,
NODE_MEMBER_DOT,
NODE_MEMBER_ARROW,
NODE_POSTINC,
NODE_POSTDEC,
NODE_COMPOUND_LITERAL,
NODE_ARGUMENT_EXPRESSION_LIST,
NODE_PREINC,
NODE_PREDEC,
NODE_ADDROF,
NODE_DEREF,
NODE_POSITIVE,
NODE_NEGATIVE,
NODE_BNOT,
NODE_NOT,
NODE_SIZEOF_EXP,
NODE_SIZEOF_TYPE,
NODE_ALIGNOF,
NODE_CAST,
NODE_MUL,
NODE_DIV,
NODE_MOD,
NODE_ADD,
NODE_SUB,
NODE_SHL,
NODE_SHR,
NODE_LT,
NODE_GT,
NODE_LTE,
NODE_GTE,
NODE_EQ,
NODE_NEQ,
NODE_BAND,
NODE_BXOR,
NODE_BOR,
NODE_AND,
NODE_OR,
NODE_CONDITIONAL,
NODE_ASG,
NODE_RASG,
NODE_COMMA,
/* Declarations */
NODE_DECLARATION,
NODE_DECLARATION_SPECIFIERS,
NODE_INIT_DECLARATOR_LIST,
NODE_INIT_DECLARATOR,
NODE_STORAGE_CLASS_SPECIFIER,
NODE_TYPE_SPECIFIER,
NODE_STRUCT_OR_UNION_SPECIFIER,
NODE_STRUCT_DECLARATION_LIST,
NODE_STRUCT_DECLARATION,
NODE_SPECIFIER_QUALIFIER_LIST,
NODE_STRUCT_DECLARATOR_LIST,
NODE_BITFIELD_DECLARATOR,
NODE_BITFIELD_PADDING,
NODE_ENUM_SPECIFIER,
NODE_ENUMERATOR_LIST,
NODE_ENUMERATOR,
NODE_ATOMIC_TYPE_SPECIFIER,
NODE_TYPE_QUALIFIER,
NODE_FUNCTION_SPECIFIER,
NODE_ALIGNMENT_SPECIFIER,
NODE_DECLARATOR,
NODE_DIRECT_DECLARATOR,
NODE_POINTER,
NODE_TYPE_QUALIFIER_LIST,
NODE_PARAMETER_TYPE_LIST,
NODE_PARAMETER_LIST,
NODE_PARAMETER_DECLARATION,
NODE_IDENTIFIER_LIST,
NODE_TYPE_NAME,
NODE_ABSTRACT_DECLARATOR,
NODE_DIRECT_ABSTRACT_DECLARATOR,
NODE_INITIALIZER,
NODE_DESIGNATION_INITIALIZER,
NODE_INITIALIZER_LIST,
NODE_DESIGNATION,
NODE_DESIGNATOR_LIST,
NODE_DESIGNATOR,
NODE_STATIC_ASSERT_DECLARATION,
/* Statements */
NODE_LABELED_STATEMENT,
NODE_CASE_STATEMENT,
NODE_DEFAULT_STATEMENT,
NODE_BLOCK,
NODE_BLOCK_ITEM_LIST,
NODE_EXPRESSION_STATEMENT,
NODE_IF_STATEMENT,
NODE_SWITCH_STATEMENT,
NODE_WHILE_STATEMENT,
NODE_DO_WHILE_STATEMENT,
NODE_FOR_STATEMENT,
NODE_FOR_INITIALIZER,
NODE_GOTO_STATEMENT,
NODE_CONTINUE_STATEMENT,
NODE_BREAK_STATEMENT,
NODE_RETURN_STATEMENT,
/* Translation unit/top level */
NODE_TRANSLATION_UNIT,
NODE_FUNCTION_DEFINITION,
NODE_DECLARATION_LIST,
NODE_FILE,
NODE_TERM,
/* Decoration */
NODE_DECORATION_OPEN,
NODE_DECORATION_OPEN_CONT,
NODE_DECORATION_OP,
NODE_EXPRESSION_DECORATOR,
NODE_DECORATION_SUB_EXPRESSION,
NODE_DECORATED_DECLARATION,
NODE_DECORATED_FUNCTION_DEFINITION,
NODE_DECORATION_DECLARATION,
NODE_DECORATED_DECLARATION_SPECIFIERS,
NODE_DECORATED_SPECIFIER_QUALIFIER_LIST,
NODE_DECLARATION_DECORATOR_LIST,
NODE_DECLARATION_DECORATOR,
NODE_DECORATION_SUB_DECLARATION,
    NODE_LAST
};
 typedef struct ParseState_ {
    ScanState *scanState;
    /* pushback tokens */
    struct Buffer_Tokenp buf;
    /* error state */
    size_t eidx, el, ec;
    struct Buffer_int eexpected;
    int efound;
} ParseState;
/***************************************************************
 * ENTRY POINT                                                 *
 ***************************************************************/
 Node *cparse(ScanState *state, char **error);
#endif
