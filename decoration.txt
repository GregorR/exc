The fundamental addition that exc makes to C's grammar is decorations.
Decorations are a sort of "escape" from C code that has no defined semantics.
Instead, modules loaded by exc transform the decorations into regular C code
before it is compiled.

Decorations add ambiguity to the C grammar. Where ambiguous, optional parts of
the decoration are preferred to outer productions (i.e., the same rule used by
all other ambiguities in C)

To support decorations, the C grammar is extended as follows:

----------------------------------------------------------------

punctuator:
    @ /@ @/

decoration-name:
    «any token other than (, ), {, }, [, ], @, /@ or @/»

decoration-open:
    ( decoration-open-cont )

decoration-open-cont:
    «any sequence of tokens with matching ()s»

primary-expression:
    expression-decoration

multiplicative-expression:
    «cast-expression is replaced by decoration-op-expression»

decoration-op-expression:
    cast-expression
    decoration-op-expression expression-decorator cast-expression

expression-decorator:
    @ decoration-name decoration-open-opt decoration-sub-expression-opt
    /@ decoration-name decoration-open-opt decoration-sub-expression-opt @/

decoration-sub-expression:
    { expression-opt }
    { block-item-list }

declaration:
    declaration-decorator-list declaration
    declaration-decorator-list ;

declaration-specifiers:
    declaration-specifiers declaration-decorator-list

specifier-qualifier-list:
    specifier-qualifier-list declaration-decorator-list

declaration-decorator-list:
    declaration-decorator
    declaration-decorator declaration-decorator-list

declaration-decorator:
    @ decoration-name decoration-open-opt decoration-sub-declaration-opt
    /@ decoration-name decoration-open-opt decoration-sub-declaration-opt @/

decoration-sub-declaration:
    { translation-unit-opt }

----------------------------------------------------------------

This allows for decorators as:

Decorator expressions: Decorators themselves may serve as an expression.

Decorator operator: They may be used as an operator, with precedence just
higher than multiplication.

Declaration decorators: Decorating otherwise-normal declarations.

Decorator declaration: Decorators may serve as declarations. When ambiguous
with expression declarators, the latter is preferred.

Type decorators: Come after type name and specifiers.
